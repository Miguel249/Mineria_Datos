# -*- coding: utf-8 -*-
"""PCA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1shl6OHfIyTy_PqBpOllVcY54z-mLZmic
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import operator

url='C:/Users/migue/OneDrive/Escritorio/Universidad Miguel Charris/Sem 7/Mineria de datos/2DOutliers.csv'
Datos=pd.read_csv(url)

Datos.plot(x='x',y='y',kind='scatter')
plt.grid()
plt.title('Grafica con datos en bruto')
plt.show()

media_x=Datos["x"].mean()
media_y=Datos["y"].mean()
s_x=Datos["x"].std()
s_y=Datos["y"].std()
matriz_distancia_X=[]
matriz_distancia_Y=[]

for i in range(103):
  distancia=Datos["x"][i]-s_x
  matriz_distancia_X.append(distancia)

for i in range(103):
  distancia=Datos["y"][i]-s_y
  matriz_distancia_Y.append(distancia)

for i in range(103):
  if(operator.not_((matriz_distancia_X[i]>(3*s_x))or(matriz_distancia_Y[i]>(3*s_y)))):
    plt.scatter(Datos["x"][i],Datos["y"][i], color='blue')
  else:
    plt.scatter(Datos["x"][i],Datos["y"][i], color='red')

plt.title('Grafica marcando outliers con n=3')
plt.ylabel('y')
plt.xlabel('x')
plt.grid()
plt.show()

for i in range(103):
  if(operator.not_((matriz_distancia_X[i]>(3*s_x))or(matriz_distancia_Y[i]>(3*s_y)))):
    plt.scatter(Datos["x"][i],Datos["y"][i], color='blue')
  

plt.title('Grafica limpiada con n=3')
plt.ylabel('y')
plt.xlabel('x')
plt.grid()
plt.show()

# Crear un DataFrame con los datos limpios
datos_limpios = pd.DataFrame(columns=["x", "y"])
for i in range(103):
  if not ((matriz_distancia_X[i] > (3 * s_x)) or (matriz_distancia_Y[i] > (3 * s_y))):
    datos_limpios = datos_limpios.append({"x": Datos["x"][i], "y": Datos["y"][i]}, ignore_index=True)

# Guardar los datos limpios en un archivo CSV
datos_limpios.to_csv("datos_limpios.csv", index=False)

import csv
from sklearn.decomposition import PCA

# Datos brutos
df_brutos = pd.read_csv("C:/Users/migue/OneDrive/Escritorio/Universidad Miguel Charris/Sem 7/Mineria de datos/2DOutliers.csv")

# Datos limpios
df_limpios = pd.read_csv("C:/Users/migue/OneDrive/Escritorio/Universidad Miguel Charris/Sem 7/Mineria de datos/datos_limpios.csv")

# PCA sobre datos brutos
pca_brutos = PCA(n_components=2)
pca_brutos.fit(df_brutos)
pca_brutos_components = pca_brutos.transform(df_brutos)

# PCA sobre datos limpios
pca_limpios = PCA(n_components=2)
pca_limpios.fit(df_limpios)
pca_limpios_components = pca_limpios.transform(df_limpios)

# Definir la matriz
matriz = ['x'],['y']

# Escribir la matriz en un archivo CSV
with open('Limpios.csv', 'w', newline='') as archivo:
    escritor_csv = csv.writer(archivo)
    for fila in matriz:
        escritor_csv.writerow(fila)
        
# Centroide de datos brutos
centroid_brutos = np.mean(df_brutos, axis=0)

# Centroide de datos limpios
centroid_limpios = np.mean(df_limpios, axis=0)

fig, ax = plt.subplots(1,2, figsize=(12,6))

# Líneas en ambas direcciones PC1 y PC2 centradas en el centroide de los datos brutos
ax[0].arrow(centroid_brutos[0], centroid_brutos[1], pca_brutos.components_[0,0], pca_brutos.components_[0,1], head_width=0.2, head_length=0.2, fc='r', ec='r')
ax[0].arrow(centroid_brutos[0], centroid_brutos[1], pca_brutos.components_[1,0], pca_brutos.components_[1,1], head_width=0.2, head_length=0.2, fc='r', ec='r')
ax[0].scatter(df_brutos.iloc[:,0], df_brutos.iloc[:,1],color = 'blue')
ax[0].set_title('Datos brutos')


#
# Líneas en ambas direcciones PC1 y PC2 centradas en el centroide de los datos limpios
ax[1].arrow(centroid_limpios[0], centroid_limpios[1], pca_limpios.components_[0,0], pca_limpios.components_[0,1], head_width=0.2, head_length=0.2, fc='r', ec='r')
ax[1].arrow(centroid_limpios[0], centroid_limpios[1], pca_limpios.components_[1,0], pca_limpios.components_[1,1], head_width=0.2, head_length=0.2, fc='r', ec='r')
ax[1].scatter(df_limpios.iloc[:,0], df_limpios.iloc[:,1])
ax[1].set_title('Datos limpios')

plt.show()